{"config": {"simName": "CirclesDemo", "steps": 1000, "seed": 0, "camera": [0, 0, 0]}, "layers": {"1": ["output_message"], "2": ["move"]}, "environment_variables": {"1": {"name": "RADIUS", "type": "Float", "value": 2.0}, "2": {"name": "AGENT_COUNT", "type": "UInt16", "value": 16384}, "3": {"name": "ENV_MAX", "type": "Float", "value": 25.0}, "4": {"name": "repulse", "type": "Float", "value": 0.05}}, "messages": {"0": {"name": "location", "type": "MessageSpatial3D", "vars": ["x", "y", "z", "id"], "var_types": ["Float", "Float", "Float", "ID"], "params": {"radius": "env.getPropertyFloat(\"RADIUS\")", "min": ["0", "0", "0"], "max": ["25", "25", "25"]}}}, "function_blocks": {"0": {"name": "output_message", "index": 1, "pos": [595, 33], "inp_type": "", "out_type": "location", "code": "    FLAMEGPU->message_out.setVariable<flamegpu::id_t>(\"id\", FLAMEGPU->getID());\n    FLAMEGPU->message_out.setLocation(\n        FLAMEGPU->getVariable<float>(\"x\"),\n        FLAMEGPU->getVariable<float>(\"y\"),\n        FLAMEGPU->getVariable<float>(\"z\"));\n    return flamegpu::ALIVE;"}, "1": {"name": "move", "index": 2, "pos": [638, 354], "inp_type": "location", "out_type": "", "code": "    const flamegpu::id_t ID = FLAMEGPU->getID();\n    const float REPULSE_FACTOR = FLAMEGPU->environment.getProperty<float>(\"repulse\");\n    const float RADIUS = FLAMEGPU->message_in.radius();\n    float fx = 0.0;\n    float fy = 0.0;\n    float fz = 0.0;\n    const float x1 = FLAMEGPU->getVariable<float>(\"x\");\n    const float y1 = FLAMEGPU->getVariable<float>(\"y\");\n    const float z1 = FLAMEGPU->getVariable<float>(\"z\");\n    int count = 0;\n    for (const auto &message : FLAMEGPU->message_in(x1, y1, z1)) {\n        if (message.getVariable<flamegpu::id_t>(\"id\") != ID) {\n            const float x2 = message.getVariable<float>(\"x\");\n            const float y2 = message.getVariable<float>(\"y\");\n            const float z2 = message.getVariable<float>(\"z\");\n            float x21 = x2 - x1;\n            float y21 = y2 - y1;\n            float z21 = z2 - z1;\n            const float separation = sqrtf(x21*x21 + y21*y21 + z21*z21);\n            if (separation < RADIUS && separation > 0.0f) {\n                float k = sinf((separation / RADIUS)*3.141f*-2)*REPULSE_FACTOR;\n                // Normalise without recalculating separation\n                x21 /= separation;\n                y21 /= separation;\n                z21 /= separation;\n                fx += k * x21;\n                fy += k * y21;\n                fz += k * z21;\n                count++;\n            }\n        }\n    }\n    fx /= count > 0 ? count : 1;\n    fy /= count > 0 ? count : 1;\n    fz /= count > 0 ? count : 1;\n    FLAMEGPU->setVariable<float>(\"x\", x1 + fx);\n    FLAMEGPU->setVariable<float>(\"y\", y1 + fy);\n    FLAMEGPU->setVariable<float>(\"z\", z1 + fz);\n    FLAMEGPU->setVariable<float>(\"drift\", sqrtf(fx*fx + fy*fy + fz*fz));\n    return flamegpu::ALIVE;"}}, "agent_blocks": {"0": {"name": "Circle", "index": 1, "pos": [302, 238], "var_names": ["x", "y", "z", "drift"], "var_types": ["Float", "Float", "Float", "Float"], "var_values": ["random.random()*25", "random.random()*25", "random.random()*25", "0"], "population": "AGENT_COUNT"}}, "gen_func_blocks": {"0": {"name": "Validation", "index": 1, "pos": [876, 159], "code": "    static float prevTotalDrift = FLT_MAX;\n    static unsigned int driftDropped = 0;\n    static unsigned int driftIncreased = 0;\n    // This value should decline? as the model moves towards a steady equlibrium state\n    // Once an equilibrium state is reached, it is likely to oscillate between 2-4? values\n    float totalDrift = FLAMEGPU->agent(\"Circle\").sum<float>(\"drift\");\n    if (totalDrift <= prevTotalDrift)\n        driftDropped++;\n    else\n        driftIncreased++;\n    prevTotalDrift = totalDrift;\n    // printf(\"Avg Drift: %g\\n\", totalDrift / FLAMEGPU->agent(\"Circle\").count());\n    printf(\"%.2f%% Drift correct\\n\", 100 * driftDropped / static_cast<float>(driftDropped + driftIncreased));", "funcType": "Step"}}, "lines": {"1": [1, 2]}, "visual": {"system": {"show": true, "speed": 30, "camPos": "(30, 30, 30)", "camDir": "(0, 0, 0)"}, "Circle": {"show": true, "model": "Icosphere", "colour": "fcba03", "scale": 0.05}}, "linked_funcs": {"Circle": ["output_message", "move"]}}