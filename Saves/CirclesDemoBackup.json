{"config": {"simName": "CirclesDemo", "steps": 1000, "seed": 0, "camera": [0, 0, 0]}, "layers": {"1": ["output_message"], "2": ["move"]}, "environment_variables": {"1": {"name": "RADIUS", "type": "Float", "value": 2.0}, "2": {"name": "AGENT_COUNT", "type": "UInt16", "value": 16384}, "3": {"name": "ENV_MAX", "type": "Float", "value": 25.0}, "4": {"name": "repulse", "type": "Float", "value": 0.05}}, "messages": {"0": {"name": "location", "type": "MessageSpatial3D", "vars": ["x", "y", "z", "id"], "var_types": ["Float", "Float", "Float", "ID"], "params": {"radius": "env.getPropertyFloat(\"RADIUS\")", "min": ["0", "0", "0"], "max": ["25", "25", "25"]}}}, "function_blocks": {"0": {"name": "output_message", "index": 1, "pos": [595, 33], "inp_type": "", "out_type": "location", "code": ["    FLAMEGPU->message_out.setVariable<flamegpu::id_t>(\"id\", FLAMEGPU->getID());", "    FLAMEGPU->message_out.setLocation(", "        FLAMEGPU->getVariable<float>(\"x\"),", "        FLAMEGPU->getVariable<float>(\"y\"),", "        FLAMEGPU->getVariable<float>(\"z\"));", "    return flamegpu::ALIVE;"]}, "1": {"name": "move", "index": 2, "pos": [638, 354], "inp_type": "location", "out_type": "", "code": ["    const flamegpu::id_t ID = FLAMEGPU->getID();", "    const float REPULSE_FACTOR = FLAMEGPU->environment.getProperty<float>(\"repulse\");", "    const float RADIUS = FLAMEGPU->message_in.radius();", "    float fx = 0.0;", "    float fy = 0.0;", "    float fz = 0.0;", "    const float x1 = FLAMEGPU->getVariable<float>(\"x\");", "    const float y1 = FLAMEGPU->getVariable<float>(\"y\");", "    const float z1 = FLAMEGPU->getVariable<float>(\"z\");", "    int count = 0;", "    for (const auto &message : FLAMEGPU->message_in(x1, y1, z1)) {", "        if (message.getVariable<flamegpu::id_t>(\"id\") != ID) {", "            const float x2 = message.getVariable<float>(\"x\");", "            const float y2 = message.getVariable<float>(\"y\");", "            const float z2 = message.getVariable<float>(\"z\");", "            float x21 = x2 - x1;", "            float y21 = y2 - y1;", "            float z21 = z2 - z1;", "            const float separation = sqrtf(x21*x21 + y21*y21 + z21*z21);", "            if (separation < RADIUS && separation > 0.0f) {", "                float k = sinf((separation / RADIUS)*3.141f*-2)*REPULSE_FACTOR;", "                // Normalise without recalculating separation", "                x21 /= separation;", "                y21 /= separation;", "                z21 /= separation;", "                fx += k * x21;", "                fy += k * y21;", "                fz += k * z21;", "                count++;", "            }", "        }", "    }", "    fx /= count > 0 ? count : 1;", "    fy /= count > 0 ? count : 1;", "    fz /= count > 0 ? count : 1;", "    FLAMEGPU->setVariable<float>(\"x\", x1 + fx);", "    FLAMEGPU->setVariable<float>(\"y\", y1 + fy);", "    FLAMEGPU->setVariable<float>(\"z\", z1 + fz);", "    FLAMEGPU->setVariable<float>(\"drift\", sqrtf(fx*fx + fy*fy + fz*fz));", "    return flamegpu::ALIVE;"]}}, "agent_blocks": {"0": {"name": "Circle", "index": 1, "pos": [302, 238], "var_names": ["x", "y", "z", "drift"], "var_types": ["Float", "Float", "Float", "Float"], "var_values": ["random.random()*25", "random.random()*25", "random.random()*25", "0"], "population": "AGENT_COUNT"}}, "gen_func_blocks": {"0": {"name": "Validation", "index": 1, "pos": [876, 159], "code": ["def __init__(self):", "    self.prevTotalDrift = sys.float_info.max", "    self.driftDropped = 0", "    self.driftIncreased = 0", "    super().__init__()", "    ", "", "def run(self, FLAMEGPU):         ", "", "    totalDrift = FLAMEGPU.agent(\"Circle\").sumFloat(\"drift\")", "    if totalDrift <= self.prevTotalDrift:", "        self.driftDropped += 1", "    else:", "        self.driftIncreased += 1", "    self.prevTotalDrift = totalDrift", "    #print(f\"Avg drift: {totalDrift/FLAMEGPU.agent('Circle').count()}\")", "    print(f\"Drift correct: {100* self.driftDropped/(self.driftDropped+self.driftIncreased)}\")"], "funcType": "Step"}}, "lines": {"1": [1, 2]}, "visual": {"system": {"show": true, "speed": 30, "camPos": "(30, 30, 30)", "camDir": "(0, 0, 0)"}, "Circle": {"show": true, "model": "Icosphere", "colour": "fcba03", "scale": 0.05}}, "linked_funcs": {"Circle": ["output_message", "move"]}}