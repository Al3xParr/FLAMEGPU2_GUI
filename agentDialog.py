# Form implementation generated from reading ui file 'UI/addAgent.ui'
#
# Created by: PyQt6 UI code generator 6.2.1
#
# WARNING: Any manual changes made to this file will be lost when pyuic6 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt6 import QtCore, QtGui, QtWidgets
from PyQt6.QtWidgets import QDialog
import structures
import re


class Ui_agentDialog(object):

    def __init__(self):
        #super.__init__(self)
        self.vars = 0


    def setupUi(self, agentDialog):
        agentDialog.setObjectName("agentDialog")
        agentDialog.resize(400, 330)
        agentDialog.setFixedSize(400, 330)
        self.buttonBox = QtWidgets.QDialogButtonBox(agentDialog)
        self.buttonBox.setGeometry(QtCore.QRect(30, 290, 341, 32))
        self.buttonBox.setOrientation(QtCore.Qt.Orientation.Horizontal)
        self.buttonBox.setStandardButtons(QtWidgets.QDialogButtonBox.StandardButton.Cancel|QtWidgets.QDialogButtonBox.StandardButton.Ok)
        self.buttonBox.setObjectName("buttonBox")
        self.newAgentName = QtWidgets.QLineEdit(agentDialog)
        self.newAgentName.setGeometry(QtCore.QRect(20, 20, 113, 20))
        self.newAgentName.setObjectName("newAgentName")
        self.agentAddVarBtn = QtWidgets.QPushButton(agentDialog)
        self.agentAddVarBtn.setGeometry(QtCore.QRect(20, 240, 360, 23))
        self.agentAddVarBtn.setObjectName("agentAddVarBtn")
        self.agentScroll = QtWidgets.QScrollArea(agentDialog)
        self.agentScroll.setGeometry(QtCore.QRect(20, 60, 360, 171))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.agentScroll.sizePolicy().hasHeightForWidth())
        self.agentScroll.setSizePolicy(sizePolicy)
        self.agentScroll.setWidgetResizable(True)
        self.agentScroll.setObjectName("agentScroll")
        self.agentScrollContainer = QtWidgets.QWidget()
        self.agentScrollContainer.setGeometry(QtCore.QRect(0, 0, 358, 169))
        self.agentScrollContainer.setObjectName("agentScrollContainer")
        self.agentVertLayout = QtWidgets.QVBoxLayout(self.agentScrollContainer)
        self.agentVertLayout.setObjectName("agentVertLayout")
        spacerItem = QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Policy.Minimum, QtWidgets.QSizePolicy.Policy.Expanding)
        self.agentVertLayout.addItem(spacerItem)
        self.agentScroll.setWidget(self.agentScrollContainer)

        #Connecting buttons to functions
        self.agentAddVarBtn.clicked.connect(self.addVar)
        

        self.retranslateUi(agentDialog)
        #self.buttonBox.accepted.connect(agentDialog.accept) # type: ignore
        self.buttonBox.accepted.connect(self.createAgent)
        self.buttonBox.rejected.connect(agentDialog.reject) # type: ignore
        QtCore.QMetaObject.connectSlotsByName(agentDialog)

    def retranslateUi(self, agentDialog):
        _translate = QtCore.QCoreApplication.translate
        agentDialog.setWindowTitle(_translate("agentDialog", "Add Agent"))
        self.newAgentName.setPlaceholderText(_translate("agentDialog", "Agent Name"))
        self.agentAddVarBtn.setText(_translate("agentDialog", "Add Variable"))

    def createAgent(self):
        name = self.newAgentName.text()
        agent_vars = []
        agent_var_types = []

        contents = self.agentScrollContainer.children()
        contents_names = [c.objectName() for c in contents]

        if not structures.isValidName(self.newAgentName.text()):
            self.errorMsg("Agent name")
        
        for i in range(self.vars):
            a = contents_names.index(f"varType{i}")
            b = contents_names.index(f"varName{i}")
            c = contents_names.index(f"varVal{i}")

            if not structures.isValidName(contents[b].text()):
                self.errorMsg("Variable name invalid")
                return
            
            if not structures.checkVar(contents[c].text(), contents[a].currentText().lower()):
                self.errorMsg("Value does not match type")
                return

            agent_var_types.append(contents[a].currentText())
            agent_vars.append(contents[b].text())

        self.parent().createAgentBlock(name, agent_vars, agent_var_types)
        self.accept()
    
    def errorMsg(self, string):

        confirmBox = QtWidgets.QMessageBox()
        confirmBox.setText("Agent Creation Error")
        confirmBox.setInformativeText(f"An error has been detected in:\n {string}")
        confirmBox.setStandardButtons(QtWidgets.QMessageBox.StandardButton.Ok)
        result = confirmBox.exec()
        if result == QtWidgets.QMessageBox.StandardButton.Yes:
            self.setParent(None)
            return True
        return False

    def addVar(self):
        
        self.newVarBox = QtWidgets.QHBoxLayout()
        self.newVarBox.setObjectName(f"varBox{self.vars}")
        self.newVarType = QtWidgets.QComboBox(self.agentScrollContainer)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Expanding, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.newVarType.sizePolicy().hasHeightForWidth())
        self.newVarType.setSizePolicy(sizePolicy)
        self.newVarType.setMinimumSize(QtCore.QSize(0, 20))
        self.newVarType.setObjectName(f"varType{self.vars}")
        self.newVarType.addItem("Float")
        self.newVarType.addItem("Double")
        self.newVarType.addItem("Int8")
        self.newVarType.addItem("UInt8")
        self.newVarType.addItem("Int16")
        self.newVarType.addItem("UInt16")
        self.newVarType.addItem("Int32")
        self.newVarType.addItem("UInt32")
        self.newVarType.addItem("Int64")
        self.newVarType.addItem("UInt64")
        self.newVarBox.addWidget(self.newVarType)
        self.newVarName = QtWidgets.QLineEdit(self.agentScrollContainer)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Expanding, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.newVarName.sizePolicy().hasHeightForWidth())
        self.newVarName.setSizePolicy(sizePolicy)
        self.newVarName.setMinimumSize(QtCore.QSize(0, 20))
        self.newVarName.setObjectName(f"varName{self.vars}")
        self.newVarName.setPlaceholderText("Variable Name")
        self.newVarBox.addWidget(self.newVarName)
        self.newVarVal = QtWidgets.QLineEdit(self.agentScrollContainer)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Expanding, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.newVarVal.sizePolicy().hasHeightForWidth())
        self.newVarVal.setSizePolicy(sizePolicy)
        self.newVarVal.setMinimumSize(QtCore.QSize(0, 20))
        self.newVarVal.setObjectName(f"varVal{self.vars}")
        self.newVarVal.setPlaceholderText("Default Value")
        self.newVarBox.addWidget(self.newVarVal)
        self.newVarDel = QtWidgets.QPushButton(self.agentScrollContainer)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.newVarDel.sizePolicy().hasHeightForWidth())
        self.newVarDel.setSizePolicy(sizePolicy)
        self.newVarDel.setMinimumSize(QtCore.QSize(20, 20))
        self.newVarDel.setObjectName(f"varDel{self.vars}")
        self.newVarDel.setText("X")
        self.newVarBox.addWidget(self.newVarDel)

        self.newVarDel.clicked.connect(self.removeItem)

        children = self.agentVertLayout.count()
        self.agentVertLayout.insertLayout(children-1, self.newVarBox)

        self.vars += 1

    def removeItem(self):
        widget = self.sender()

        layout = widget.parent().layout()
        items = layout.children()

        w_num = "".join([n for n in widget.objectName() if n.isdigit()])

        for item in items:
            i_num = "".join([n for n in item.objectName() if n.isdigit()])  
            if i_num == w_num:                  
                layout.removeItem(item)
                break
        
        for child in widget.parent().children():
            c_num = "".join([n for n in child.objectName() if n.isdigit()])  
            if c_num == w_num:
                child.setParent(None)
        
        self.vars -= 1



class AgentDialog(QDialog, Ui_agentDialog):
    def __init__(self, parent = None):
        super(AgentDialog, self).__init__(parent)
        self.setupUi(self)
